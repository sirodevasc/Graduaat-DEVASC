#!/usr/bin/env python
# coding: utf-8

# In[9]:


#unfinished part
import os
#print(os.environ)
BEARER_TOKEN = os.environ.get("WEBEX_API_TOKEN")
print(BEARER_TOKEN)


# In[7]:


##### WEBEX TEAMS API - USER ACCOUNTS - SPACES/ ROOMS - MEMBERS - MESSAGES
### SAME CODE AS THE CELL BELOW, ADDITIONALLY THE CELL BELOW CONTAINS COMMENTS AND DEBUGGING CODE
### ACCESS TOKEN REQUESTED THROUGH LOGIN IN WEBEX DEVELOPER WEBSITE
### Access Token 12 hours: https://developer.webex.com/docs/api/getting-started (login required)
##### BEGIN #####
import requests
import json
import datetime
print(datetime.datetime.now())
print("----------1----------")
current_access_token = "USE_YOUR_OWN_KEY"
uri_scheme = 'https://'
uri_authority_server = 'api.ciscospark.com'
uri_api_path = '/v1/people/me'
url = uri_scheme + uri_authority_server + uri_api_path 
headers = {
    'Authorization': 'Bearer {}'.format(current_access_token),
    'Content-Type': 'application/json'
}
# res = requests.request('GET', url, headers=headers)
res = requests.get(url, headers=headers)
##### END #####
#
### PRINTING RELEVANT DEBUGGING INFORMATION REGARDING THE API REQUEST
print("Access Token: " + current_access_token)
print("----------2----------")
print('Request URI: ' + url)
print('Request Header: ' + json.dumps(headers))
print("API Return Code: " + str(res.status_code))  
user_name = res.json()['displayName']
print("Username: " + user_name)
print("----------3----------")
#
#print("Displaying all returned information in formatted json")
#print(json.dumps(res.json(), indent=2))
if res.status_code == 200:
    print("Status is OK")
else:
    print("Status is not OK")


# In[12]:


##### WEBEX TEAMS API - USER ACCOUNTS - SPACES/ ROOMS - MEMBERS - MESSAGES
#STEP 1 -- Example how to access webex teams with a bearer token
### SAME CODE AS THE CELL ABOVE, ADDITIONALLY THIS CELL USES DEBUGGING CODE
import requests
import json
import datetime 
print("Testing if current access token is valid")
print("Current date and time: ")
print(datetime.datetime.now())
# GENERATED BY WEBEX DEVELOPERS
#
# PART A => DEFINE ACCESS TOKEN
current_access_token = "USE_YOUR_OWN_KEY"
# This access token may be a (limited duration) personal access token, a Bot token, or an OAuth token from an Integration or Guest Issuer application.
# Make sure to replace access_token with YOUR access token.
# Access Token 12 hours: https://developer.webex.com/docs/api/getting-started (login required)
# Your Personal Access Token
# ====> Bearer
#
#Testing if current acces token is still valid and who is the owner
#
# PART B => CREATE URL
uri_scheme = 'https://'
uri_authority_server = 'api.ciscospark.com'
uri_api_path = '/v1/people/me'
url = uri_scheme + uri_authority_server + uri_api_path 
#url = 'https://api.ciscospark.com/v1/people/me'
#
# PART C => CREATE HEADERS
headers = {
    'Authorization': 'Bearer {}'.format(current_access_token),
    'Content-Type': 'application/json'
}

#
# PART D => EXECUTE REQUEST WITH URL AND HEADERS
# Checking the current access token and preventing failures
try:
    print("Checking who is the owner of the access token ...")
    res = requests.get(url, headers=headers)
    # display the data type of the response:
    print(type(res))
    ### get request parameters: url, headers, data, json, **optional (**kwargs)
    ### instead of accepting positional arguments requests accepts **kwargs = keyword (or named) arguments
    ### https://2.python-requests.org/en/master/api/#requests.request
    print('--------------------------------')
    print('API Request URI: ' + url)
    print('API Request Header: ' + json.dumps(headers))
    print("API Return Code: " + str(res.status_code))
    #print("Method: " + str(res.method))
    print('--------------------------------')       
    user_name = res.json()['displayName']
    print("Username: " + user_name)
    print("Access Token is valid")
except:
    print("ERROR: NO ACCESS")
#
# PART E => DISPLAY RESULTS 
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print("----------------------")
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print("--------------------------------")
# Display the current Access Token
print("Access Token: " + current_access_token)
####
#type(headers)
#print("Content Type: "  + headers["Content-Type"])
#type(res.status_code)
#print(res.url)
#print(res.headers)
#print(res.content)
#print("Displaying all returned information in formatted json")
#print(json.dumps(res.json(), indent=2))
if res.status_code == 200:
    print("Status is OK")
else:
    print("Status is not OK")


# In[13]:


# STEP 2 -- Starting Cisco Webex Teams API, Getting All Account Information
import requests
import json
import datetime
print('Starting Cisco Webex Teams API, Getting All Account Information')
print ("Current date and time: ")
print(datetime.datetime.now())
#
# STEP A => DEFINE ACCESS TOKEN
access_token = current_access_token
#
# STEP B => CREATE URL
url = 'https://api.ciscospark.com/v1/people/me'
#
# STEP C => CREATE HEADERS
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
#
# STEP D => EXECUTE REQUEST WITH URL AND HEADERS
res = requests.get(url, headers=headers)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(headers))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
# STEP E => DISPLAY RESULTS 
print("Displaying partial information")
#print(type(res))
print("Name: " + res.json()['displayName'])
print("Created: " + res.json()['created'])
print("User Type: " + res.json()['type'])
print("User Status: " + res.json()['status'])
print("--------------------------------")
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print("--------------------------------")
#print("Displaying all returned information in raw json format")
#print(res.json())
#print("--------------------------------")
#
#print("Displaying all returned information in formatted json")
#print(json.dumps(res.json(), indent=2))
#print("--------------------------------")


# In[14]:


# STEP 3 -- Permissions: Getting Member Information
import requests
import json
import datetime
print('Permissions: Getting Member Information')
print('Number of Return Items needs to be limited')
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
url = 'https://api.ciscospark.com/v1/memberships'
header = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
# query parameters in a GET method act as a filters to the query and are optional
# number of return items can  be limited
params = {
    "max": 2
}
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
res = requests.get(url, headers=header, params=params)
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print("----------------------")
#print("Displaying all returned information in raw json format")
#print(res.json())
#print("----------------------")
#
print("Displaying  returned information specially formatted")
formatted_message = """
Webex Teams API Response

Response Status Code   : {}
Response Link Header   : {}
Response Body          : {}
------------------------------
""".format(res.status_code,  res.headers.get('Link'), json.dumps(res.json(), indent=2))
print(formatted_message)


# In[15]:


# STEP 4 -- Getting user information based on email address
import requests
import json
import datetime
print("Getting user information based on email address")
print ("Current date and time: ")
print(datetime.datetime.now())
# WHAT EMAIL ADDDRESS ARE YOU SEARCHING?
user_email_searched = 'yvan.rooseleer@biasc.be'
#
access_token = current_access_token 
""
url = 'https://api.ciscospark.com/v1/people'
#
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
# query parameters in a GET method act as a filters to the query and are optional
params = {
    'email': user_email_searched # Make sure you add your users's email address here
}
#
res = requests.get(url, headers=headers, params=params)
#
print('--------------------------------')
print("URL: " + url)
print('Parameter: ' + params["email"])
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('-------------------------------')
#
print("Displaying partial information")
#print(type(res))
#print(type(res.json()['items']))
#print(type(res.json()['items'][0]['displayName']))
#print(res)
print("User Name: " + res.json()['items'][0]['displayName'])
print("Created: " + res.json()['items'][0]['created'])
print("User Type: " + res.json()['items'][0]['type'])
print("User Status: " + res.json()['items'][0]['status'])
print('-------------------------------')
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print("-------------------------------")
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print("--------------------------------")
print("Displaying all information in formatted JSON")
print(json.dumps(res.json(), indent=2))
print('--------------------------------')


# In[9]:


# STEP 5 -- Getting information about a specific person, using Person ID
import requests
import json
import datetime
print("Getting information about a specific person, using Person ID")
print("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
person_id = 'Y2lzY29zcGFyazovL3VzL1BFT1BMRS9hYjJjZTU2NC1hNzliLTQ5YzUtODIzYS05MmNlYzQ5NjI5MGY' # Add your ID here, which you get from the prior request
url = 'https://api.ciscospark.com/v1/people/{}'.format(person_id)
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
res = requests.get(url, headers=headers)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
if res.status_code == 200:
    person_id = res.json()["id"]
    print('--------------------------------')
    print('PERSON ID: ' + person_id)
    print('----FULL-RESULT-(json)----')
    print(json.dumps(res.json(), indent=2))
    print('--------------------------------')
else:
    print("Error occured: " + str(res.status_code))


# In[10]:


# STEP 6 -- Getting information about multiple rooms or spaces
import requests
import json
import datetime
print("Getting information about rooms or spaces")
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
url = 'https://api.ciscospark.com/v1/rooms'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
#
# query parameters in a GET method act as a filters to the query and are optional
params={'max': '3'}
#params = { 'sortBy': 'lastactivity', 'max': '2' }
#
res = requests.get(url, headers=headers, params=params)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print('--------------------------------')
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print('--------------------------------')
#
print("Displaying information in formatted JSON format")
print(json.dumps(res.json(), indent=2))


# In[17]:


# STEP 7  -- Creating a space or a room
import requests
import json
import datetime
print("Creating a space or a room")
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
url = 'https://api.ciscospark.com/v1/rooms'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
#
payload={"title": "BRU - IT SYSNET DEPT"}
# body argument: "data= " or "json= " => "json= " is more specific than "data= "
res = requests.post(url, headers=headers, json=payload)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#print(res.json())
# Keeping SPACE_ID for later use
NEW_SPACE_ID = res.json()["id"]
print("NEW SPACE ID: " + NEW_SPACE_ID )
print('--------------------------------')
print(json.dumps(res.json(), indent=2))
print('--------------------------------')


# In[24]:


# STEP 8 -- Getting information about a space or room
import requests
import json
import datetime
print("Getting information about a space or room")
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
room_id = NEW_SPACE_ID # Make sure you add the room ID value that was returned from the previous call you made
url = 'https://api.ciscospark.com/v1/rooms/{}/meetingInfo'.format(room_id)
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
res = requests.get(url, headers=headers)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print('--------------------------------')
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print('--------------------------------')
#
print(json.dumps(res.json(), indent=2))


# In[25]:


# STEP 9 -- Managing members of a space or a room
import requests
import json
import datetime
print("Managing members of a space or a room")
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
room_id = NEW_SPACE_ID # Make sure you add the room ID value that was returned from the previous call you made
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {'roomId': room_id}
res = requests.get(url, headers=headers, params=params)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print('--------------------------------')
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print('--------------------------------')
#
print(json.dumps(res.json(), indent=2))


# In[20]:


# STEP 10 -- Managing memberships -- Add a member to a space 
import requests
import json
import datetime
print("Managing memberships -- Add someone to a space - creating a member")
print ("Current date and time: ")
print(datetime.datetime.now())
access_token = current_access_token 
room_id = NEW_SPACE_ID # Make sure you add the room ID value that was returned from the previous call you made
person_email = 'yvan@biasc.be' # Add the email address of someone with a Webex Teams account
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
payload = {'roomId': room_id, 'personEmail': person_email}
# body argument: "data= " or "json= " => "json= " is more specific than "data= "
res = requests.post(url, headers=headers, json=payload)
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
MEMBER_ID = res.json()['id']
print("Member Id: " + MEMBER_ID)
# if user exists
# HTTP Status Code 409: The request could not be completed due to a conflict with the current state of the target resource. 
print('--------------------------------')
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print('--------------------------------')
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print('--------------------------------')
#
print(json.dumps(res.json(), indent=2))


# In[23]:


# STEP 11 -- Sending a markdown message to a space
import requests
import json
import datetime
print('Sending a markdown message to a space')
print ("Current date and time: ")
print(datetime.datetime.now())
#
access_token = current_access_token 
#
room_id = NEW_SPACE_ID # Make sure you add the room ID value that was returned from the previous call you made
#
## This is your Markdown message
#message = '**Information message**: All systems running' 
#message = '**Warning**: Internet connection down' 
#message = '**Notification**: Internet connection up' 
#message = '**Alert**: Site under attack'  
#message = '**Notification**: Attack averted'  
#
#
url = 'https://api.ciscospark.com/v1/messages'
#
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
#
payload  = {'roomId': room_id, 'markdown': message}
# other example: body = { 'toPersonEmail': 'tofrench@webex.bot', 'text': 'Hello' }
#
# body argument: "data= " or "json= " => "json= " is more specific than "data= "
res = requests.post(url, headers=headers, json=payload)
print('--------------------------------')
#
print("URL: " + url)
print('Header: ' + json.dumps(header))
print("Return Code: " + str(res.status_code))
#
#
#print("Displaying all returned information in text format")
#print("Return Text: " + str(res.text))
#print('--------------------------------')
#print("Displaying all returned information in raw JSON format")
#print(res.json())
#print('--------------------------------')
#
print(json.dumps(res.json(), indent=2))


# In[21]:


# STEP 12 -- Removing users as a member from a space or room
import requests
import json
import datetime
print('Removing users as a member from a space or room')
print ("Current date and time: ")
print(datetime.datetime.now())
#
access_token = current_access_token
#
mmbr = MEMBER_ID 
#
url = 'https://api.ciscospark.com/v1/memberships/{}'.format(mmbr)
#
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
#
res = requests.delete(url, headers=headers)
#
print('--------------------------------')
print("URL: " + url)
print('Header: ' + json.dumps(headers))
print("Return Code: " + str(res.status_code))
print('--------------------------------')
#
# Response has no content => delete only needs a return code 204
# HTTP Status 204 (No Content) indicates that the server has successfully fulfilled 
# the request and that there is no content to send in the response payload body.


# In[ ]:


### NOT FINISHED
# STEP 13
# TO DO => Delete space from Webex
#####


# In[23]:


#####
# ALTERNATIVE: using WebexTeams SDK instead of HTTP Request
##### pip install webexteamssdk
from webexteamssdk import WebexTeamsAPI

# Variable which holds the message
msg = "Testing: message to Webex SDK ** IT Infrastructure Team **"

# New instance of the CiscoSparkAPI object
api = WebexTeamsAPI(access_token=current_access_token)

# Create a room and assign returned value to a variable
room = api.rooms.create("BRU - IT Infrastructure Team")

# Send message to specified room with markdown syntax.
send_msg = api.messages.create(roomId=room.id, markdown=msg)

##### View the result in Webex Teams

